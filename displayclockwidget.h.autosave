#ifndef DISPLAYCLOCKWIDGET_H
#define DISPLAYCLOCKWIDGET_H

#include <QWidget>
#include <QBrush>

#include "TimeStatus.hpp"
namespace lon {
class DisplayClockBase : public QWidget
{
    Q_OBJECT
protected:
    QBrush *working_foreground_brush_;
    QBrush *shortbreaking_foreground_brush_;
    QBrush *longbreaking_foreground_brush_;

    double currentPersent(lon::TimerStatus const *timer_status) {
        lon::ClockTime const *total_time = timer_status->getTotalTime();
        int total = total_time->minutes_ * 60 + total_time->seconds_;
        if(total == 0) return -1;
        int left  = timer_status->timeleft()->minutes() * 60 +
                   timer_status->timeleft()->seconds();
        int current_passed_time = total - left;

        //qDebug() << "++" << current_passed_time << "--" << total;
        return (double)current_passed_time / total;
    }
public:
    explicit DisplayClockBase(QWidget *parent = nullptr) : QWidget(parent) {
        working_foreground_brush_       = new QBrush(QColor(244, 12, 36, 50));
        shortbreaking_foreground_brush_ = new QBrush(QColor(30, 239, 61, 50));
        longbreaking_foreground_brush_  = new QBrush(QColor(163, 66, 222, 50));
    }
signals:

public slots:
    virtual void updateTimeDisplay(lon::TimerStatus const *timer_status) = 0;
};
}


#endif // DISPLAYCLOCKWIDGET_H
